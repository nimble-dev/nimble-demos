<!DOCTYPE html>
<html>
<head>
  <title>Bayesian Nonparametric Models in NIMBLE, Part 2: Nonparametric random effects</title>
</head>
<body>
<!--begin.rcode, echo=FALSE, results = FALSE
  library(knitr)
  opts_chunk$set(fig.width=6, fig.height=4)
  library(methods) ## needed only when building documents outside of R
  library(nimble)
  library(TeachingDemos)
  end.rcode-->

<!--
Build with knit('intro_bnp_raneff.Rhtml').
Then copy and paste into blog post.
--> 

<h1> Bayesian nonparametrics in NIMBLE: Nonparametric random effects </h1>

<h2> Overview </h2>

<p> NIMBLE is a hierarchical modeling package that uses nearly the same language for model specification as the popular MCMC packages WinBUGS, OpenBUGS and JAGS, while making the modeling language extensible -- you can add distributions and functions -- and also allowing customization of the algorithms used to estimate the parameters of the model.</p>

<p> Recently, we added support for Markov chain Monte Carlo (MCMC) inference of Bayesian nonparametric (BNP) mixture models to NIMBLE. In particular, starting with version 0.6-11, NIMBLE provides functionality for fitting models involving Dirichlet process priors using either the Chinese Restaurant Process (CRP), or a truncated stick-breaking (SB) representation of the Dirichlet process prior.</p>

<p> We will illustrate NIMBLE's BNP capabilities using two examples.  In a previous post, we showed how to use nonparametric mixture models with different kernels for density estimation.  In this post, we will take a parametric generalized linear mixed model and show how to switch it into a nonparametric representation of the random effects that avoids the assumption of normally-distributed random effects.</p>

<p>For more detailed information on NIMBLE and Bayesian nonparametrics in NIMBLE, see the <a href="https://r-nimble.org/documentation">NIMBLE User Manual</a>.</p>

<h2> Parametric meta analysis of Avandia myocardial infarctions (MIs)</h2>

<p>We will illustrate the use of nonparametric mixture models for modeling random effects distributions in the context of a meta-analysis of the side effects of a formerly very popular drug for diabetes called Avandia. The data we analyze played a role in raising serious questions about the safety of this drug.  The question is whether Avandia use increases the risk of myocardial infarction (heart attack). There are 48 studies (the 49th study in the data file is different in some ways and excluded here), each with treatment and control arms.</p>

<!--begin.rcode avandia-view
dat <- read.csv('https://rawgit.com/nimble-dev/nimble-demos/master/intro_bnp/avandia.csv')
head(dat)
end.rcode-->

<h3> Model formulation</h3>

<p>We begin with a standard generalized linear mixed model (GLMM)-based meta analysis. The vectors [latex]n[/latex] and [latex]x[/latex] contain the total number of patients in the control and the number of patients suffering from myocardial infarctions in the control group of each study, respectively.  Similarly, the vectors [latex]m[/latex] and [latex]y[/latex] contain similar information for patients receiving the drug Avandia.  The model takes the form</p>

[latex]
x_{i} \mid \theta, \gamma_i \sim \mbox{Bin} \left(n_i,   \frac{\exp\left\{ \gamma_i  \right\}}{1 + \exp\left\{ \gamma_i  \right\}} \right) , \quad\quad y_{i} \mid \theta, \gamma_i \sim \mbox{Bin} \left(m_i,   \frac{\exp\left\{ \theta + \gamma_i  \right\}}{1 + \exp\left\{ \theta + \gamma_i  \right\}} \right) 
[/latex]

where the random effects [latex]\gamma_i[/latex] follow a common normal distributions, [latex]\gamma_i \sim \mbox{N}(0, \tau^2)[/latex], and the [latex]\theta[/latex] and [latex]\tau^2[/latex] are given non-informative priors.  The parameter [latex]\theta[/latex] quantifies the difference in risk between the control and treatment arms, while the [latex]\gamma_i[/latex] quantify study-specific variation.</p>

<p>This model can be specified in NIMBLE using the following code:</p>

<!--begin.rcode avandia-setup
dat <- read.csv('avandia.csv')
dat <- dat[-49, ]

x <- dat$controlMI
n <- dat$nControl
y <- dat$avandiaMI
m <- dat$nAvandia

nStudies <- nrow(dat)
data <- list(x = x, y = y)
constants = list(n = n, m = m, nStudies = nStudies)

codeParam <- nimbleCode({
    for(i in 1:nStudies) {
        y[i] ~ dbin(size = m[i], prob = q[i]) # avandia MIs
        x[i] ~ dbin(size = n[i], prob = p[i]) # control MIs
        q[i] <- expit(theta + gamma[i])       # Avandia log-odds
        p[i] <- expit(gamma[i])               # control log-odds
        gamma[i] ~ dnorm(mu, sd = tau)        # study effects
    }
    theta ~ dflat()        # effect of Avandia
    # random effects hyperparameters
    mu ~ dnorm(0, 1)
    tau ~ dgamma(2, 1)
})
end.rcode-->


<h3> Running the MCMC</h3>

<p>Let's run a basic MCMC.</p>

<!--begin.rcode mcmc, fig.cap='', fig.width=13, fig.height=5
set.seed(9)
inits = list(theta = 0, mu = 0, tau = 1, gamma = rnorm(nStudies))

samples <- nimbleMCMC(code = codeParam, data = data, inits = inits,
                      constants = constants, monitors = c("mu", "tau", "theta", "gamma"),
                      thin = 10, niter = 22000, nburnin = 2000, nchains = 1, setSeed = TRUE)

par(mfrow = c(1, 4))
ts.plot(samples[ , 'theta'], xlab = 'iteration', ylab = expression(theta))
hist(samples[ , 'theta'], xlab = expression(theta), main = 'effect of Avandia')

gammaCols <- grep('gamma', colnames(samples))
gammaMn <- colMeans(samples[ , gammaCols])
hist(gammaMn, xlab = 'posterior means of random effects', main = 'random effects distribution')
hist(samples[1000, gammaCols], xlab = 'single draw of random effects',
                   main = 'random effects distribution')
end.rcode-->

<p>The results suggests there is an overall difference in risk between the control and treatment arms.  But what about the normality assumption? Are our conclusions robust to that assumption? Perhaps the random effects distribution are skewed. (And recall that the estimates above of the random effects are generated under the normality assumption, which pushes the estimated effects to look more normal...)</p>


<h2> DP-based random effects modeling for meta analysis</h2>

<h3> Model formulation</h3>

<p>Now, we use a nonparametric distribution for [latex]\gamma_i[/latex]s.  More specifically, we assume that each [latex]\gamma_i[/latex] is generated from a location-scale mixture of normal distributions:
  
[latex]
\gamma_i \mid \mu_i, \tau_i^2 \sim \mbox{N}(\mu_i, \tau_i^2),   \quad\quad  (\mu_i, \tau_i^2) \mid G \sim G,   \quad\quad     G \sim \mbox{DP}(\alpha, H),
  [/latex]
  
where [latex]H[/latex] is again a normal-inverse-gamma distribution.</p>

<p>This specification induces clustering among the random effect.  As in the case of density estimation problems, the DP prior allows the data to determine the number of components, from as few as one component (i.e., simplifying to the parametric model), to as many as [latex]n[/latex] components, i.e., one component for each observation. This allows the distribution of the random effects to be multimodal if the data supports such behavior, greatly increasing its flexibility.  This model can be specified in NIMBLE using the following code:</p>

<!--begin.rcode meta-bnp
codeBNP <- nimbleCode({
    for(i in 1:nStudies) {
        y[i] ~ dbin(size = m[i], prob = q[i]) # avandia MIs
        x[i] ~ dbin(size = n[i], prob = p[i]) # control MIs
        q[i] <- expit(theta + gamma[i])       # Avandia log-odds
        p[i] <- expit(gamma[i])               # control log-odds
        gamma[i] ~ dnorm(mu[i], var = tau2[i])  # random effects from mixture dist.
        mu[i] <- muTilde[xi[i]]               # mean for random effect from cluster xi[i]
        tau2[i] <- tau2Tilde[xi[i]]             # var for random effect from cluster xi[i]
    }
    # mixture component parameters drawn from base measures
    for(i in 1:nStudies) {
        muTilde[i] ~ dnorm(mu0, var = var0)
        tau2Tilde[i] ~ dinvgamma(a0, b0)
    }
    # CRP for clustering studies to mixture components
    xi[1:nStudies] ~ dCRP(alpha, size = nStudies)
    # hyperparameters
    alpha ~ dgamma(1, 1)      
    mu0 ~ dnorm(0, 1)
    var0 ~ dinvgamma(2, 1)
    a0 ~ dinvgamma(2, 1)
    b0 ~ dinvgamma(2, 1)
    theta ~ dflat()          # effect of Avandia
})
end.rcode-->

<h3> Running the MCMC</h3>

<p>The following code compiles the model and runs a collapsed Gibbs sampler for the model</p>

<!--begin.rcode DP-MCMC, fig.cap='', fig.width=8, fig.height=10
inits <- list(gamma = rnorm(nStudies), xi = sample(1:2, nStudies, replace = TRUE),
              alpha = 1, mu0 = 0, var0 = 1, a0 = 1, b0 = 1, theta = 0,
              muTilde = rnorm(nStudies), tau2Tilde = rep(1, nStudies))

samplesBNP <- nimbleMCMC(code = codeBNP, data = data, inits = inits,
               constants = constants,
               monitors = c("theta", "gamma", "alpha", "xi", "mu0", "var0", "a0", "b0"),
               thin = 10, niter = 22000, nburnin = 2000, nchains = 1, setSeed = TRUE)

gammaCols <- grep('gamma', colnames(samplesBNP))
gammaMn <- colMeans(samplesBNP[ , gammaCols])
xiCols <- grep('xi', colnames(samplesBNP))

par(mfrow = c(1,5))
ts.plot(samplesBNP[ , 'theta'], xlab = 'iteration', ylab = expression(theta))
hist(samplesBNP[ , 'theta'], xlab = expression(theta), main = 'effect of Avandia')
hist(gammaMn, xlab = 'posterior means of random effects',
              main = 'random effects distribution')
hist(samplesBNP[1000, gammaCols], xlab = 'single draw of random effects',
                   main = 'random effects distribution')

# How many mixture components are inferred?
xiRes <- samplesBNP[ , xiCols]
nGrps <- apply(xiRes, 1, function(x) length(unique(x)))
ts.plot(nGrps, xlab = 'iteration', ylab = 'number of components')
end.rcode-->

<p>The primary inference seems robust.  This is probably driven by the fact that there is not much evidence of lack of normality in the random effects distribution (as evidenced by the fact that the posterior distribution of the number of mixture components places a large amount of probability on exactly one component).</p>

<h2> More information and future development </h2>

<p>Please see our <a href="https://r-nimble.org/documentation">User Manual</a> for more details.</p>

<p>We're in the midst of improvements to the existing BNP functionality as well as adding additional Bayesian nonparametric models, such as hierarchical Dirichlet processes and Pitman-Yor processes, so please add yourself to our <a href="https://groups.google.com/forum/#!forum/nimble-announce">announcement</a> or <a href="https://groups.google.com/forum/#!forum/nimble-users">user support/discussion</a> Google groups. </p>



</body>
</html>












